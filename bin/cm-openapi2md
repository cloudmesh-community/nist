#! /usr/bin/env python
"""Cloudmesh OpenAPI Code Generator.

Usage:
  cm-openapi2md md FILE [--indent=INDENT]

  cm-openapi2md (-h | --help)
  cm-openapi2md --version

Options:
  --target=SERVICE The service to be generated [default:service]
  -h --help        Show this screen.
  --version        Show version.


Description:

  md FILE

     converts the yaml file to md

"""
from __future__ import print_function

''' manual page draft

have some kind of git script similar to

curl -L https://github.com/pyenv/pyenv-installer/raw/main/bin/pyenv-installer | bash

'''


from docopt import docopt
import os
import sys
import re
import shutil
from prompter import yesno
import yaml
from pprint import pprint

VERSION="0.1"

DEBUG= False

try:
    columns, lines = os.get_terminal_size()
except:
    rows, columns = map(int, os.popen('stty size', 'r').read().split())


def ERROR(*args, **kwargs):
    print("ERROR", *args, file=sys.stderr, **kwargs)


def convert_definitions(filename, indent=1):
    with open(filename, "r") as f:
        spec = yaml.load(f, Loader=yaml.SafeLoader)
        # print (yaml.dump( spec, default_flow_style=False, default_style='' ))
        print (spec["info"]["description"])
        print ()
        for definition in spec["components"]["schemas"]:
            #print (indent * "#", definition)
            ldefinition = definition.lower()
            print (indent * "#", 'Schema', definition)
            print()
            print (f"[Reference: :cloud:]("
                   f"https://github.com/cloudmesh/cloudmesh-nist/blob"
                   f"/main/spec/{ldefinition}.yaml)")

            print ()
            print ("|", "Property", "|", "Type", "|", "Description", "|")
            print ("|", "---", "|", "---", "|", "-------------", "|")            
            properties = spec["components"]["schemas"][definition]['properties']
            for property in properties:


                if 'description' not in properties[property]:
                  properties[property]['description'] = "ERROR: description missing"


                if 'type' not in properties[property]:
                  properties[property]['type'] = ""


                if properties[property]['type'] == "array":
                    if "type" in properties[property]["items"]:
                        properties[property]['type'] = "array[{}]".format(properties[property]["items"]["type"])
                    elif "$ref" in properties[property]["items"]:

                        kind = properties[property]["items"]["$ref"].split(
                            "/")[-1:][0]

                        properties[property]['type'] = f"array\[{kind}\]"

                if 'format' not in properties[property]:
                  properties[property]['format'] = ""
                else:
                  form = properties[property]['format']
                  properties[property]['format'] = f"({form})"
                  properties[property]['type'] = properties[property]['type'] + f"({form})"


                if '$ref' in properties[property]:
                    ref = properties[property]['$ref']
                    name, result, link = parse_ref(ref)
                    properties[property]['type'] = link


                print ("|", property, "|", properties[property]['type'], "|",properties[property]['description'], "|")
            print ()


def section_link_from_ref(response):
    # See [section one](#section-one).
    link = ""                    
    try:
        response["section"] = response['schema']['$ref'].replace("#/components/schemas/","")
        if "yaml" in response["section"]:
            response["section"] = response["section"].split("yaml")[1]
        response["lsection"] = response["section"].lower()

    except:
        response["section"] = ""
        response["lsection"] = ""        
    if response["section"] != "" :
        link = "[{section}](#{lsection})".format(**response)
    else:                    
        #link = "Integer"
        link = "String"
    response["link"] = link
    return response




def parse_ref(content):
    name = "NONE"
    result = "NONE"
    try:
        tmp = content.replace("#/components/schemas/","")
        if "yaml" in tmp:
            name, result = tmp.split(".yaml")

        else:
            name = ""
            result = tmp
    except Exception as e:
        result = "ERROR: ref parsing " + content + str(e)
        name = "ERROR"

    section = result.capitalize()
    lsection = result.lower()
    link = f"[{section}](#{lsection})"

    return name, result, link

def parse_response(code, response):

    if 'description' in response:
        description = response['description']
    else:
        description = 'ERROR: description missing'


    kind = 'ERROR'
    if 'content' not in response:
        # kind = 'Integer'
        kind = 'String'


    elif 'content' in response:
        schema = response['content']['application/json']['schema']

        if 'type' in schema and schema['type'] == 'array':

            resource =  schema['items']
            resource = parse_schema(resource)

            kind = f"array[{resource}]"

        elif '$ref' in schema:
            resource =  schema['$ref']
            name, resource, kind = parse_ref(resource)
        elif 'type' in schema:
            kind = schema['type']
    else:
        print ("YYYYYYY", response)

    '''
    response = responses[code]
    response['code'] = code

    if "content" not in response:
        response['schema'] = ""
    else:
        try:
            response['schema'] = response["content"][
                "application/json"]["schema"]
        except:
            response['schema'] = "ERROR"

    response = section_link_from_ref(response)
    '''

    return code, description, kind


def schema_from_parameter(response):
    # See [section one](#section-one).
    link = ""

    if 'schema' in response:
        response["link"] = ""
        if '$ref' in response['schema']:
            response["section"] = response['schema']['$ref'].replace("#/components/schemas/", "")
            if "yaml" in response["section"]:
                response["section"] = response["section"].split("yaml")[1]
            response["lsection"] = response["section"].lower()
            response["link"] = "[{section}](#{lsection})".format(**response)



        elif 'type' in response['schema']:

            response["section"] = response['schema']['type'].capitalize()
            response["lsection"] = response["section"].lower()
            response["link"] = response["section"].capitalize()



    else:
        print ("ERROR:", response)

    return response


def parse_schema(element):


    if '$ref' in element:
        section = element['$ref'].replace("#/components/schemas/", "")
        if "yaml" in section:
            section = section.split("yaml")[1]
        lsection = section.lower()
        link = f"[{section}](#{lsection})"

    elif 'type' in element:
        section = element['type'].capitalize()
        link = section.capitalize()

    return link



def convert_paths(filename, indent=1):
     with open(filename, "r") as f:
        spec = yaml.load(f,  Loader=yaml.SafeLoader)
        # print (yaml.dump( spec, default_flow_style=False, default_style='' ))
        print()
        if "paths" in spec:
            paths = spec["paths"]

            print(indent * "#", "Paths")
            print()

            print ("| HTTP | Path    | Summary       |")
            print ("| :---- | :------- | :------------- |")

            for path in paths:
                element = paths[path]
                for p in element:
                    if 'summary' in element[p]:
                        summary = element[p]['summary']
                    else:
                        summary = "ERROR: missing"
                    print (f"| {p} | {path} | {summary} |")

            print()

            print()
            for path in paths:
                print ((indent + 1) * "#", path)
                print ()
                #print ("|", "Property", "|", "Type", "|", "Description", "|")
                #print ("|", "---", "|", "---", "|", "-------------", "|")
                urls = paths[path]
                for method in urls:
                    print ((indent + 2) * '#', method.upper(), path)
                    print()
                    #
                    # DESCRIPTION
                    #
                    # print ((indent + 3) * "#", "Description")
                    # print()
                    try:
                        description = paths[path][method]['description']
                    except Exception as e:
                        description = "ERROR: missing"
                    print (description)
                    print()
                    #
                    # RESPONSES
                    #
                    #print ((indent + 3) * "#", "Responses")
                    print ("Responses")
                    print()
                    try:
                        responses = paths[path][method]['responses']
                    except Exception as e:
                        responses = "ERROR: undefined"

                    print ("|", "Code", "|", "Description", "|", "Schema", "|")
                    print ("|", "---", "|", "---", "|", "-------------", "|")
                    for code in responses:
                        response = responses[code]

                        code, description, link = parse_response(code, response)
                        print (f"| {code} | {description} | {link} |")

                    print ()
                    #
                    #PARAMETERS
                    #
                    # print ((indent + 3) * "#", "PARAMETERS")
                    parameters = None
                    try:
                        parameters = paths[path][method]['parameters']
                        print ("Parameters")
                        print()


                    except Exception as e:
                        parameters = None
                    if parameters is not None:
                        print ("| Name | Located in | Description | Required | Schema |")
                        print ("| --- | --- | ------------- | --- | --- |")
                        for parameter in parameters:


                            if "required" not in parameter:
                               parameter['required'] = False
                            if "description" not in parameter:
                               parameter['description'] = "ERROR: description missing"
                            try:
                                parameter = schema_from_parameter(parameter)

                            except Exception as e:
                                print ("ERROR", e)

                            print ("| {name} | {in} | {description} | {required} | {link} | ".format(**parameter))
                        print()


                   #
                    #Request BODY
                    #
                    # print ((indent + 3) * "#", "PARAMETERS")
                    parameters = None

                    if 'requestBody' in paths[path][method]:

                        schema = paths[path][method]['requestBody']['content']['application/json']['schema']
                        description = paths[path][method]['requestBody']['description']
                        required = paths[path][method]['requestBody']['required']

                        print ("Request Body")
                        print()

                        print ("| Located in | Description | Required | Schema |")
                        print ("| --- | --- | ------------- | --- | --- |")
                        link = parse_schema(schema)
                        print (f"| Body | {description} | {required} | {link} | ")
                    print()


                print ()

def analyse():

    #
    # SERVICE
    #
    if arguments["md"]:
       if arguments["--indent"] is None:
          indent = 1
       else:
          indent = int(arguments["--indent"])
       filename = arguments["FILE"]
       convert_definitions(filename, indent)
       convert_paths(filename, indent)       
       pass


if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    if DEBUG:
        print(arguments)
      

    analyse()
