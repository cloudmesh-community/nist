#! /usr/bin/env python
"""Cloudmesh OpenAPI Code Generator.

Usage:
  cm-openapi2md md FILE [--indent=INDENT]

  cm-openapi2md (-h | --help)
  cm-openapi2md --version

Options:
  --target=SERVICE The service to be generated [default:service]
  -h --help        Show this screen.
  --version        Show version.


Description:

  md FILE

     converts the yaml file to md

"""

''' manual page draft

have some kind of git script similar to

curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

'''


from docopt import docopt
import os
import sys
import re
import shutil
from prompter import yesno
import yaml
from pprint import pprint

VERSION="0.1"

DEBUG= False

try:
    columns, lines = os.get_terminal_size()
except:
    rows, columns = map(int, os.popen('stty size', 'r').read().split())


def ERROR(*args, **kwargs):
    print("ERROR", *args, file=sys.stderr, **kwargs)


def convert_definitions(filename, indent=1):
    with open(filename, "r") as f:
        spec = yaml.load(f, Loader=yaml.SafeLoader)
        # print (yaml.dump( spec, default_flow_style=False, default_style='' ))
        print (spec["info"]["description"])
        print ()
        for definition in spec["definitions"]:
            #print (indent * "#", definition)
            ldefinition = definition.lower()
            print (indent * "#", 'Properties', definition)
            print (f"[Reference: :cloud:]("
                   f"https://github.com/cloudmesh/cloudmesh-nist/blob"
                   f"/master/spec/{ldefinition}.yaml)")

            print ()
            print ("|", "Property", "|", "Type", "|", "Description", "|")
            print ("|", "---", "|", "---", "|", "-------------", "|")            
            properties = spec["definitions"][definition]['properties']
            for property in properties:
                if 'description' not in properties[property]:
                  properties[property]['description'] = "ERROR: description missing"

                if 'type' not in properties[property]:
                  properties[property]['type'] = ""
                  
                if properties[property]['type'] == "array":
                    if "type" in properties[property]["items"]:
                        properties[property]['type'] = "array[{}]".format(properties[property]["items"]["type"])
                    elif "$ref" in properties[property]["items"]:
                        properties[property]['type'] = "array[{}]".format(properties[property]["items"]["$ref"])                        
  
                  
                print ("|", property, "|", properties[property]['type'], "|",properties[property]['description'], "|")
            print ()

def section_link_from_ref(response):
    # See [section one](#section-one).
    link = ""                    
    try:
        response["section"] = response['schema']['$ref'].replace("#/definitions/","")
        response["lsection"] = response["section"].lower()
    except:
        response["section"] = ""
        response["lsection"] = ""        
    if response["section"] != "" :
        link = "[{section}](#{lsection})".format(**response)
    else:                    
        link = ""
    response["link"] = link
    return response
            
def convert_paths(filename, indent=1):
     with open(filename, "r") as f:
        spec = yaml.load(f,  Loader=yaml.SafeLoader)
        # print (yaml.dump( spec, default_flow_style=False, default_style='' ))
        print()
        print(indent * "#", "Paths")
        print()
        paths = spec["paths"]
        for path in paths:
            print ((indent + 1) * "#", path)
            print ()
            #print ("|", "Property", "|", "Type", "|", "Description", "|")
            #print ("|", "---", "|", "---", "|", "-------------", "|")            
            urls = paths[path]
            for method in urls:
                print ((indent + 2) * '#', method.upper(), path)
                print()
                #
                # DESCRIPTION
                #
                # print ((indent + 3) * "#", "Description")
                # print()
                try:
                    description = paths[path][method]['description']
                except Exception as e:
                    description = "ERROR: missing"
                print (description)
                print()
                #
                # RESPONSES
                #
                #print ((indent + 3) * "#", "Responses")
                print ("Responses")
                print()
                try:
                    responses = paths[path][method]['responses']
                except Exception as e:
                    responses = "ERROR: undefined"
                for code in responses:
                    print ("|", "Code", "|", "Description", "|", "Schema", "|")
                    print ("|", "---", "|", "---", "|", "-------------", "|")            
                    response = responses[code]
                    if "schema" not in response:
                       response['schema'] = ""
                       
                    response['code'] = code
                    response = section_link_from_ref(response)
                    print ("| {code} | {description} | {link} |".format(**response))
                    print ()
                #
                #PARAMETERS
                #
                # print ((indent + 3) * "#", "PARAMETERS")
                parameters = None
                try:
                    parameters = paths[path][method]['parameters']
                    print ("Parameters")                
                    print()
                except Exception as e:
                    parameters = None
                if parameters is not None:
                    print ("| Name | Located in | Description | Required | Schema |")
                    print ("| --- | --- | ------------- | --- | --- |")
                    for parameter in parameters:
                        if "required" not in parameter:
                           parameter['required'] = False
                        if "description" not in parameter:
                           parameter['description'] = "ERROR: description missing"
                        parameter = section_link_from_ref(parameter)

                        print ("| {name} | {in} | {description} | {required} | {link} | ".format(**parameter))
            print ()

def analyse():

    #
    # SERVICE
    #
    if arguments["md"]:
       if arguments["--indent"] is None:
          indent = 1
       else:
          indent = int(arguments["--indent"])
       filename = arguments["FILE"]
       convert_definitions(filename, indent)
       convert_paths(filename, indent)       
       pass


if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    if DEBUG:
        print(arguments)
      

    analyse()
